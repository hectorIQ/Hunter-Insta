# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Wed Oct 27 01:05:11 2021
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'='))